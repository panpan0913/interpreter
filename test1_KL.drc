# %include drcrule.drc

s = source("top.gds")
t = target("top_M.gds")
l1 = s.input(1)
l2 = s.input(2)
poly = s.input(3)
active = s.input(4)
l7 = s.input(6)
l16 = s.input(7)
l17 = s.input(8)


apa = AND(poly, active)
apa.output(4, 0)
aspa = AND_SELF(active, 2)
aspa.output(7, 0)
agl = ANGLE(l1, 45.0000<angle<90.0000 || -90.0000<angle<-45.0000)
agl.output(5, 0)
ll = LENGTH(active, length<0.5000)
ll.output(6, 0)
ea = ENCLOSE(active, l7, covering(l7)==2.0000)
ea.output(8, 0)
sa = SIZE(l1, 0.4000, 1.0000)
sa.output(11, 0)
ipa = INTERACT(poly, active, interacting(active)>1.0000)
ipa.output(12, 0)
nap = NOT(active, poly)
nap.output(10, 0)
oap = OR(active, poly)
oap.output(13, 0)
xap = XOR(active, poly)
xap.output(14, 0)
gp = GROW(poly, 0.0000, 0.2000, 0.0000, 0.0000)
gp.output(15, 0)
ext = EXTERNAL( l16, separation(l17, projection, shielded)<=0.5000, true)
ext.output(18, 0)
enc = ENCLOSURE( l16, enclosed(l17, projection, shielded, projecting<2.5000)<=0.5000)
enc.output(19, 0)
in1617 = INTERNAL( l16, overlap(l17, projection, shielded)<=0.5000, true, 0.1)
in1617.output(22, 0)
cdp = CONVEXEDGE_DETAIL(poly, corners(as_edge_pairs)==-90.0000, corners(as_edge_pairs)==-90.0000, length<2.0000)
cdp.output(20, 0)
cep = CONVEXEDGE(poly, 1)
cep.output(26, 0)
is1617 = INTERNAL_SELF(active, width(projection, shielded)<=0.5000, false, 0.5)
is1617.output(24, 0)
exs = EXTERNAL_SELF(active, space(projection, shielded)<=0.5000, false, 0.2)
exs.output(25, 0)

#AREA(active, area<1.0).output(26, 0)
araac = AREA(active, area<1.0000)
araac.output(26, 0)

#COINCIDENTEDGE(l16, l17).output(27, 0)
cce1617 = COINCIDENTEDGE(l16, l17)
cce1617.output(27, 0)

#COINCIDENTINSIDEEDGE(l16, l17).output(28, 0)
ccein1617 = COINCIDENTINSIDEEDGE(l16, l17)
ccein1617.output(28, 0)

#COINCIDENTOUTSIDEEDGE(l16, l17).output(29, 0)
cceout1617 = COINCIDENTOUTSIDEEDGE(l16, l17)
cceout1617.output(29, 0)
#COPY(l16).output(30, 0)
cp1617 = COPY(l16)
cp1617.output(30, 0)
#TOUCH(l1, l2).output(31)
t12 = TOUCH(l1, l2)
t12.output(31, 0)
#TOUCHEDGE(l1, l2).output(32, 0)
te12 = TOUCHEDGE(l1, l2)
te12.output(32, 0)
#WITHEDGE(l1, l2.edges).output(33, 0)
we12 = WITHEDGE(l1, te12)
we12.output(33, 0)
#INSIDE(l1,l2).output(34, 0)
in12 = INSIDE(l1, l2)
in12.output(34, 0)
#OUTSIDE(l2, l1).output(35, 0)
out12 = OUTSIDE(l2, l1)
cce1617.output(35, 0)
#INSIDEEDGE(l1, l2).output(36)
ie12 = INSIDEEDGE(l1, l2)
ie12.output(36, 0)
#OUTSIDEEDGE(l2, l1).output(37)
oe12 = OUTSIDEEDGE(l2, l1)
oe12.output(37, 0)
#EXPANDEDGE(ll12, 10).output(38)
exoe12 = EXPANDEDGE(oe12, 10.0000, 10.0000, 0.0, 0.0, false)
exoe12.output(38, 0)
#EXTENT().output(39)
ex = EXTENT()
ex.output(39, 0)
#EXTENTS(l1, 0).output(40)
ext1 = EXTENTS(l1)
ext1.output(40, 0)
#ROTATE(l1, 20).output(41)
ro1 = ROTATE(l1, 20.0000)
ro1.output(41, 0)
#RECTANGLE(l1).output(42)
rec1 = RECTANGLE(l1)
rec1.output(42, 0)
#SHIFT(l1, 0.1, 0.1).output(43)
shl1 = SHIFT(l1, 0.1000, 0.1000)
shl1.output(43, 0)
#SHRINK(l1, 0.1).output(44)
srk1 = SHRINK(l1, 0.0000, 0.1000, 0.0000, 0.0000)
srk1.output(44, 0)

#l1d = l1.dup()
l1d = COPY(l1)
#POLYGON(l1d, 0, 1, 1, 0).output(45)
pl1d = POLYGON(l1d, 0, 1, 1, 0, p(0.000, 1.000), p(1.000, 0.000))
pl1d.output(45, 0)
#l1dd =l1.dup
l1dd = COPY(l1)
#POLYGON(l1dd, 0, 0.000, 0.000, 0 , p(0, 1.000), p(1.000, 0), p(0, 2.000), p(1.000, 5.000)).output(46)
pl1dd = POLYGON(l1dd, 0, 1, 1, 0, p(0.000, 1.000), p(1.000, 0.000), p(0.000, 2.000), p(1.000, 5.000))
pl1dd.output(46, 0)
