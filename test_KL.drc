# %include drcrule.drc

s = source("tp.gds")
t = target("tp_M.gds")
poly = s.input(1)
active = s.input(2)
anglep = s.input(3)
l7 = s.input(7)
l16 = s.input(16)
l17 = s.input(17)
l21 = s.input(21)


apa = AND(poly, active)
apa.output(4, 0)
aspa = AND_SELF(active, 2)
aspa.output(7, 0)
agl = ANGLE(anglep, 45.0000<angle<90.0000 || -90.0000<angle<-45.0000)
agl.output(5, 0)
ll = LENGTH(active, length<0.5000)
ll.output(6, 0)
ea = ENCLOSE(active, l7, covering(l7)==2.0000)
ea.output(8, 0)
sa = SIZE(anglep, 0.4, 1)
sa.output(11, 0)
ipa = INTERACT(poly, active, interacting(active)>1.0000)
ipa.output(12, 0)
nap = NOT(active, poly)
nap.output(10, 0)
oap = OR(active, poly)
oap.output(13, 0)
xap = XOR(active, poly)
xap.output(14, 0)
gp = GROW(poly, 0.0000, 0.2000, 0.0000, 0.1000)
gp.output(15, 0)
ext = EXTERNAL( l16, separation(l17, projection, shielded)<=0.5000, true)
ext.output(18, 0)
enc = ENCLOSURE( l16, enclosed(l17, projection, shielded, projecting<2.5000)<=0.5000)
enc.output(19, 0)
in1617 = INTERNAL( l16, overlap(l17, projection, shielded)<=0.5000, true, 0.1)
in1617.output(22, 0)
cdp = CONVEXEDGE_DETAIL(poly, corners(as_edge_pairs)==-90.0000, corners(as_edge_pairs)==-90.0000, length<2.0000)
cdp.output(20, 0)
cep = CONVEXEDGE(poly, 1)
cep.output(26, 0)
is1617 = INTERNAL_SELF(active, width(projection, shielded)<=0.5000, false, 0.5)
is1617.output(24, 0)
exs = EXTERNAL_SELF(active, space(projection, shielded)<=0.5000, false, 0.2)
exs.output(25, 0)
